
package com.radvision.icm.service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAXWS SI.
 * JAX-WS RI 2.1-02/02/2007 03:56 AM(vivekp)-FCS
 * Generated source version: 2.1
 * 
 */
@WebService(name = "ScheduleServicePortType", targetNamespace = "http://radvision.com/icm/service/scheduleservice")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ScheduleServicePortType {


    /**
     * 
     * @param terminalIdOrNumber
     * @param conferenceId
     * @return
     *     returns com.radvision.icm.service.ScheduleResultEx
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "getPhyConfId", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetPhyConfId")
    @ResponseWrapper(localName = "getPhyConfIdResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetPhyConfIdResponse")
    public ScheduleResultEx getPhyConfId(
        @WebParam(name = "conferenceId", targetNamespace = "")
        String conferenceId,
        @WebParam(name = "terminalIdOrNumber", targetNamespace = "")
        String terminalIdOrNumber);

    /**
     * 
     * @param conferenceInfo
     * @return
     *     returns com.radvision.icm.service.ScheduleResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "createConference", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateConference")
    @ResponseWrapper(localName = "createConferenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateConferenceResponse")
    public ScheduleResult createConference(
        @WebParam(name = "conferenceInfo", targetNamespace = "")
        ConferenceInfo conferenceInfo);

    /**
     * 
     * @param conferenceInfo
     * @return
     *     returns com.radvision.icm.service.ScheduleResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "createConferenceSP", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateConferenceSP")
    @ResponseWrapper(localName = "createConferenceSPResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateConferenceSPResponse")
    public ScheduleResult createConferenceSP(
        @WebParam(name = "conferenceInfo", targetNamespace = "")
        ConferenceInfo conferenceInfo);

    /**
     * 
     * @param conferenceInfo
     * @return
     *     returns com.radvision.icm.service.ScheduleResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "modifyConference", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyConference")
    @ResponseWrapper(localName = "modifyConferenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyConferenceResponse")
    public ScheduleResult modifyConference(
        @WebParam(name = "conferenceInfo", targetNamespace = "")
        ConferenceInfo conferenceInfo);

    /**
     * 
     * @param conferenceInfo
     * @return
     *     returns com.radvision.icm.service.ScheduleResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "modifyConferenceSP", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyConferenceSP")
    @ResponseWrapper(localName = "modifyConferenceSPResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyConferenceSPResponse")
    public ScheduleResult modifyConferenceSP(
        @WebParam(name = "conferenceInfo", targetNamespace = "")
        ConferenceInfo conferenceInfo);

    /**
     * 
     * @param conferenceIds
     * @return
     *     returns com.radvision.icm.service.ScheduleResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "deleteHistoryConferences", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.DeleteHistoryConferences")
    @ResponseWrapper(localName = "deleteHistoryConferencesResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.DeleteHistoryConferencesResponse")
    public ScheduleResult deleteHistoryConferences(
        @WebParam(name = "conferenceIds", targetNamespace = "")
        List<String> conferenceIds);

    /**
     * 
     * @param condition
     * @return
     *     returns java.util.List<com.radvision.icm.service.ConferenceInfo>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "searchConferences", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.SearchConferences")
    @ResponseWrapper(localName = "searchConferencesResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.SearchConferencesResponse")
    public List<ConferenceInfo> searchConferences(
        @WebParam(name = "condition", targetNamespace = "")
        ConferenceInfoCondition condition);

    /**
     * 
     * @param conferenceId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "cancelConference", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelConference")
    @ResponseWrapper(localName = "cancelConferenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelConferenceResponse")
    public boolean cancelConference(
        @WebParam(name = "conferenceId", targetNamespace = "")
        String conferenceId);

    /**
     * 
     * @param conferenceIds
     * @return
     *     returns java.util.List<com.radvision.icm.service.ScheduleResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "cancelConferences", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelConferences")
    @ResponseWrapper(localName = "cancelConferencesResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelConferencesResponse")
    public List<ScheduleResult> cancelConferences(
        @WebParam(name = "conferenceIds", targetNamespace = "")
        List<String> conferenceIds);

    /**
     * 
     * @param conferenceId
     * @return
     *     returns com.radvision.icm.service.ConferenceInfo
     * @throws InvalidArgumentException_Exception
     * @throws NotConferenceFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewConference", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConference")
    @ResponseWrapper(localName = "viewConferenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConferenceResponse")
    public ConferenceInfo viewConference(
        @WebParam(name = "conferenceId", targetNamespace = "")
        String conferenceId)
        throws InvalidArgumentException_Exception, NotConferenceFoundException_Exception
    ;

    /**
     * 
     * @param conferenceId
     * @return
     *     returns boolean
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "removeConference", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.RemoveConference")
    @ResponseWrapper(localName = "removeConferenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.RemoveConferenceResponse")
    public boolean removeConference(
        @WebParam(name = "conferenceId", targetNamespace = "")
        String conferenceId)
        throws InvalidArgumentException_Exception
    ;

    /**
     * 
     * @param recurrenceInfo
     * @return
     *     returns java.util.List<com.radvision.icm.service.ScheduleResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "createRecurrence", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateRecurrence")
    @ResponseWrapper(localName = "createRecurrenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateRecurrenceResponse")
    public List<ScheduleResult> createRecurrence(
        @WebParam(name = "recurrenceInfo", targetNamespace = "")
        RecurrenceInfo recurrenceInfo);

    /**
     * 
     * @param recurrenceInfo
     * @return
     *     returns java.util.List<com.radvision.icm.service.ScheduleResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "addRecurrence", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.AddRecurrence")
    @ResponseWrapper(localName = "addRecurrenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.AddRecurrenceResponse")
    public List<ScheduleResult> addRecurrence(
        @WebParam(name = "recurrenceInfo", targetNamespace = "")
        RecurrenceInfo recurrenceInfo);

    /**
     * 
     * @param recurrenceInfo
     * @return
     *     returns java.util.List<com.radvision.icm.service.ScheduleResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "modifyRecurrence", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyRecurrence")
    @ResponseWrapper(localName = "modifyRecurrenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyRecurrenceResponse")
    public List<ScheduleResult> modifyRecurrence(
        @WebParam(name = "recurrenceInfo", targetNamespace = "")
        RecurrenceInfo recurrenceInfo);

    /**
     * 
     * @param recurrenceId
     * @return
     *     returns java.util.List<com.radvision.icm.service.ScheduleResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "cancelRecurrence", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelRecurrence")
    @ResponseWrapper(localName = "cancelRecurrenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CancelRecurrenceResponse")
    public List<ScheduleResult> cancelRecurrence(
        @WebParam(name = "recurrenceId", targetNamespace = "")
        String recurrenceId);

    /**
     * 
     * @param recurrenceId
     * @return
     *     returns com.radvision.icm.service.RecurrenceInfo
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewRecurrence", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewRecurrence")
    @ResponseWrapper(localName = "viewRecurrenceResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewRecurrenceResponse")
    public RecurrenceInfo viewRecurrence(
        @WebParam(name = "recurrenceId", targetNamespace = "")
        String recurrenceId)
        throws InvalidArgumentException_Exception
    ;

    /**
     * 
     * @param cycleInterval
     * @param startTime
     * @param conferenceInfo
     * @param endTime
     * @return
     *     returns java.util.List<com.radvision.icm.service.AvailableInfo>
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "checkAlternativeTimes", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CheckAlternativeTimes")
    @ResponseWrapper(localName = "checkAlternativeTimesResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CheckAlternativeTimesResponse")
    public List<AvailableInfo> checkAlternativeTimes(
        @WebParam(name = "conferenceInfo", targetNamespace = "")
        ConferenceInfo conferenceInfo,
        @WebParam(name = "startTime", targetNamespace = "")
        long startTime,
        @WebParam(name = "endTime", targetNamespace = "")
        long endTime,
        @WebParam(name = "cycleInterval", targetNamespace = "")
        long cycleInterval)
        throws InvalidArgumentException_Exception
    ;

    /**
     * 
     * @param terminalIds
     * @param cycleInterval
     * @param startTime
     * @param endTime
     * @return
     *     returns java.util.List<com.radvision.icm.service.AlternateTerminalsTimedSlice>
     * @throws InvalidTerminalIdException_Exception
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "checkAlternateTerminals", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CheckAlternateTerminals")
    @ResponseWrapper(localName = "checkAlternateTerminalsResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CheckAlternateTerminalsResponse")
    public List<AlternateTerminalsTimedSlice> checkAlternateTerminals(
        @WebParam(name = "terminalIds", targetNamespace = "")
        List<String> terminalIds,
        @WebParam(name = "startTime", targetNamespace = "")
        long startTime,
        @WebParam(name = "endTime", targetNamespace = "")
        long endTime,
        @WebParam(name = "cycleInterval", targetNamespace = "")
        long cycleInterval)
        throws InvalidArgumentException_Exception, InvalidTerminalIdException_Exception
    ;

    /**
     * 
     * @param userId
     * @return
     *     returns java.util.List<com.radvision.icm.service.VirtualRoomInfo>
     * @throws VirtualRoomNotFoundException_Exception
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewVirtualRoomsByUserId", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomsByUserId")
    @ResponseWrapper(localName = "viewVirtualRoomsByUserIdResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomsByUserIdResponse")
    public List<VirtualRoomInfo> viewVirtualRoomsByUserId(
        @WebParam(name = "userId", targetNamespace = "")
        String userId)
        throws InvalidArgumentException_Exception, VirtualRoomNotFoundException_Exception
    ;

    /**
     * 
     * @param loginId
     * @param memberId
     * @return
     *     returns java.util.List<com.radvision.icm.service.VirtualRoomInfo>
     * @throws VirtualRoomNotFoundException_Exception
     * @throws InvalidArgumentException_Exception
     * @throws UserNotExistException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewVirtualRooms", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRooms")
    @ResponseWrapper(localName = "viewVirtualRoomsResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomsResponse")
    public List<VirtualRoomInfo> viewVirtualRooms(
        @WebParam(name = "loginId", targetNamespace = "")
        String loginId,
        @WebParam(name = "memberId", targetNamespace = "")
        String memberId)
        throws InvalidArgumentException_Exception, UserNotExistException_Exception, VirtualRoomNotFoundException_Exception
    ;

    /**
     * 
     * @param virtualRoomName
     * @return
     *     returns com.radvision.icm.service.VirtualRoomInfo
     * @throws VirtualRoomNotFoundException_Exception
     * @throws InvalidArgumentException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewVirtualRoomByName", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomByName")
    @ResponseWrapper(localName = "viewVirtualRoomByNameResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomByNameResponse")
    public VirtualRoomInfo viewVirtualRoomByName(
        @WebParam(name = "virtualRoomName", targetNamespace = "")
        String virtualRoomName)
        throws InvalidArgumentException_Exception, VirtualRoomNotFoundException_Exception
    ;

    /**
     * 
     * @param virtualRoomId
     * @return
     *     returns com.radvision.icm.service.VirtualRoomInfo
     * @throws InvalidArgumentException_Exception
     * @throws VirtualRoomNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewVirtualRoomById", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomById")
    @ResponseWrapper(localName = "viewVirtualRoomByIdResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomByIdResponse")
    public VirtualRoomInfo viewVirtualRoomById(
        @WebParam(name = "virtualRoomId", targetNamespace = "")
        String virtualRoomId)
        throws InvalidArgumentException_Exception, VirtualRoomNotFoundException_Exception
    ;

    /**
     * 
     * @param dialableNumber
     * @return
     *     returns java.util.List<com.radvision.icm.service.ConferenceInfo>
     * @throws InvalidArgumentException_Exception
     * @throws NotConferenceFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewConferenceByDialableNumber", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConferenceByDialableNumber")
    @ResponseWrapper(localName = "viewConferenceByDialableNumberResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConferenceByDialableNumberResponse")
    public List<ConferenceInfo> viewConferenceByDialableNumber(
        @WebParam(name = "dialableNumber", targetNamespace = "")
        String dialableNumber)
        throws InvalidArgumentException_Exception, NotConferenceFoundException_Exception
    ;

    /**
     * 
     * @param virtualRoo
     * @return
     *     returns com.radvision.icm.service.VirtualRoomResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "createVirtualRoom", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateVirtualRoom")
    @ResponseWrapper(localName = "createVirtualRoomResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.CreateVirtualRoomResponse")
    public VirtualRoomResult createVirtualRoom(
        @WebParam(name = "virtualRoo", targetNamespace = "")
        VirtualRoomInfoEx virtualRoo);

    /**
     * 
     * @param virtualRoo
     * @return
     *     returns com.radvision.icm.service.VirtualRoomResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "modifyVirtualRoom", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyVirtualRoom")
    @ResponseWrapper(localName = "modifyVirtualRoomResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ModifyVirtualRoomResponse")
    public VirtualRoomResult modifyVirtualRoom(
        @WebParam(name = "virtualRoo", targetNamespace = "")
        VirtualRoomInfoEx virtualRoo);

    /**
     * 
     * @param virtualRoomNumber
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "deleteVirtualRoom", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.DeleteVirtualRoom")
    @ResponseWrapper(localName = "deleteVirtualRoomResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.DeleteVirtualRoomResponse")
    public boolean deleteVirtualRoom(
        @WebParam(name = "virtualRoomNumber", targetNamespace = "")
        String virtualRoomNumber);

    /**
     * 
     * @param dialableNumber
     * @return
     *     returns com.radvision.icm.service.VirtualRoomInfo
     * @throws ServiceMismatchException_Exception
     * @throws InvalidArgumentException_Exception
     * @throws VirtualRoomNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewVirtualRoomByDialableNumber", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomByDialableNumber")
    @ResponseWrapper(localName = "viewVirtualRoomByDialableNumberResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewVirtualRoomByDialableNumberResponse")
    public VirtualRoomInfo viewVirtualRoomByDialableNumber(
        @WebParam(name = "dialableNumber", targetNamespace = "")
        String dialableNumber)
        throws InvalidArgumentException_Exception, ServiceMismatchException_Exception, VirtualRoomNotFoundException_Exception
    ;

    /**
     * 
     * @param dialableNumber
     * @return
     *     returns com.radvision.icm.service.ConferenceInfo
     * @throws ServiceMismatchException_Exception
     * @throws UpcomingConferenceConflictException_Exception
     * @throws InvalidArgumentException_Exception
     * @throws NotConferenceFoundException_Exception
     * @throws NoDefaultServiceException_Exception
     * @throws UpcomingConferenceException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "viewConferenceOrVirtualRoomByDialableNumber", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConferenceOrVirtualRoomByDialableNumber")
    @ResponseWrapper(localName = "viewConferenceOrVirtualRoomByDialableNumberResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.ViewConferenceOrVirtualRoomByDialableNumberResponse")
    public ConferenceInfo viewConferenceOrVirtualRoomByDialableNumber(
        @WebParam(name = "dialableNumber", targetNamespace = "")
        String dialableNumber)
        throws InvalidArgumentException_Exception, NoDefaultServiceException_Exception, NotConferenceFoundException_Exception, ServiceMismatchException_Exception, UpcomingConferenceConflictException_Exception, UpcomingConferenceException_Exception
    ;

    /**
     * 
     * @param dialableNumber
     * @return
     *     returns com.radvision.icm.service.ConferenceInfo
     * @throws ServiceMismatchException_Exception
     * @throws InvalidArgumentException_Exception
     * @throws UpcomingConferenceConflictException_Exception
     * @throws NoDefaultServiceException_Exception
     * @throws NotConferenceFoundException_Exception
     * @throws UpcomingConferenceException_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "getDialedNumberConferenceInfo", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetDialedNumberConferenceInfo")
    @ResponseWrapper(localName = "getDialedNumberConferenceInfoResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetDialedNumberConferenceInfoResponse")
    public ConferenceInfo getDialedNumberConferenceInfo(
        @WebParam(name = "dialableNumber", targetNamespace = "")
        String dialableNumber)
        throws InvalidArgumentException_Exception, NoDefaultServiceException_Exception, NotConferenceFoundException_Exception, ServiceMismatchException_Exception, UpcomingConferenceConflictException_Exception, UpcomingConferenceException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "")
    @RequestWrapper(localName = "getVersion", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetVersion")
    @ResponseWrapper(localName = "getVersionResponse", targetNamespace = "http://radvision.com/icm/service/scheduleservice", className = "com.radvision.icm.service.GetVersionResponse")
    public String getVersion();

}
